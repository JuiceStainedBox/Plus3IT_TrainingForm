<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_237286_training_records_needing_approval</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>APP_onUpdate</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[//-------- Constants ---------------

var TASK_OPEN = 1;
var TASK_IN_PROGRESS = 2;
var TASK_CLOSED = 3;

var DB_AWAIT_FIN_1 = 10;
var DB_AWAIT_FIN_2 = 15;

var DB_FIN_APPROVE_1 = 11;
var DB_FIN_APPROVE_2 = 16;



//-------- Helper Functions ----------------



/*
@function() - shows display value for corresponding backend value
@str - toString() variable returned by the choice object; corresponds with a distinct display
variable that HR selected orginially
@return - the display value that HR originally selected
 */
function displayContractCode( str ){
	switch(str){
		case "-1": return "--None--";
		case "0": return "Berico Technologies: EAADS";
		case "1": return "BAH EMT: TO4";
		case "2": return "BAH EMT: TO6";
		case "3": return "BAH EMT: TO7";
		case "4": return "BAH EPS";
		case "5": return "Acuity";
		case "6": return "ACS CDO TO9";
		case "7": return "CSRA DOS CSOS";
		case "8": return "ManTech International";
		case "9": return "Non-Billable G&A";
		case "10": return "Non-Billable OH";
	}
}

/*
@function() - shows display value for corresponding backend value
@str - toString() variable returned by the choice object; corresponds with a distinct display
variable that HR selected orginially
@return - the display value that HR originally selected
 */
function displayLaborCategory( str ){
	switch(str){
		case "-1": return "--None--";
		case "0": return "EAADS:Direct Labor:SM/FE Level 4 (Gr 3) Hourly";
		case "1": return "EAADS:Direct Labor:SM/FE Level 4 (Gr 3) Surge CLIN - Hourly";
		case "2": return "EAADS:Direct Labor:Software Engineer Level 1 (Gr 3) Surge CLIN - Hourly";
		case "3": return "EAADS:Direct Labor:Software Engineer Level 3 (Gr 3) - Hourly";
		case "4": return "EAADS:Direct Labor:Software Engineer Level 3 (Gr 3) Surge CLIN - Hourly";
		case "5": return "EAADS:Direct Labor:Software Engineer Level 2 (Gr3) Hourly";
		case "6": return "EAADS:Direct Labor:Software Engineer Level 2 (Gr3) Surge CLIN - Hourly";
		case "7": return "EAADS:Direct Labor:Software Engnr Level 4 (Gr7) Hourly";
		case "8": return "EAADS:Direct Labor:Software Engnr Level 4 (Gr7) OY1 Surge CLIN - Hourly";
		case "9": return "EMT TO4: Direct Labor: Sr Solution Architect - Hourly";
		case "10": return "EMT TO4: Direct Labor: Sr Data Engineer - Hourly";
		case "11": return "EMT TO6: Direct Labor: SM/FE Level 2 - Hourly";
		case "12": return "EMT TO7: Direct Labor: Systems Architect Level 3 - Hourly";
		case "13": return "EMT TO7: Direct Labor: Systems Architect Level 2 - Hourly";
		case "14": return "EPS2: SME Level 4 - Hourly";
		case "15": return "OCA: DECCS: CLIN 301 IT Subj Matter Spec. OY 3 - Hourly";
		case "16": return "OCA: DECCS: CLIN 302 Systems Analysis/Director OY3 - Hourly";
		case "17": return "OCA: DRL: CLIN 301 IT Subj Matter Spec. OY 3 - Hourly";
		case "18": return "OCA: DRL: CLIN 302 Systems Analysis/Director OY3 - Hourly";
		case "19": return "OCA: INL: CLIN 301 IT Subj Matter Spec. OY 3 - Hourly";
		case "20": return "ESITA TO9 Consultant - Sr IT Strategy - Hourly";
		case "21": return "CSOS: OY1Ph2 Principal Engineer/Analyst - Hourly";
		case "22": return "CSOS: OY1Ph2 Principal IT Analyst - Hourly";
		case "23": return "CSOS: OY1Ph2 Senior Engineer/Analyst - Hourly";
		case "24": return "CSOS: OY1Ph2 Sr SME - Hourly";
		case "25": return "Brooklyn: Info Technology Specialist Sr - Hourly";
		case "26": return "Brooklyn: Principal SME - Hourly";
		case "27": return "Brooklyn: Sr Principal SME - Hourly";
		case "28": return "G&A: Conf & Seminar Time - Hourly";
		case "29": return "G&A: Training / Cert Time - Hourly";
		case "30": return "OH - Hourly";
		case "31": return "OH: Conf & Seminar Time - Hourly";
	}
}

/*
@function - checks to see if financial/HR task has been reopened in workflow
@return - boolean for reset check 
*/
function isReopen(){
	
	var reset = true;
	
	if( current.state != TASK_OPEN )
		reset = false;
	
	else if( current.u_approval != "noProcess" )
		reset = false;
	
	else if( current.u_approver != "" )
		reset = false;
	
	else if( current.u_work_notes_comments != "" )
		reset = false;
	
	return reset;
	
}

/*
@function() - creates a glide record that first points to the master db
table and then queries the original record that triggered the workflow
@return - gliderecord is returned; this will be used to update the fields
in the original record as HR updates their task form; see updateOrigRecordSec1()
for more info
 */
function createDatabase(){
	
	//get table
	var db = new GlideRecord('x_237286_training_training_reimbursement_records');
	
	//get single record
	db.get('number', current.u_original_record_number);
	
	return db;
}

/*
@function() - takes in string object from multiple price fields and returns a string
formatted with commas in a periodicity of 3; for example, if a price field returns
	123456.78, this function turns it into 123,456.78; NOTE: this function does not place
a '$' in front
@strO - string object of price field
@return - formatted string of numbers using commas with periodicity of 3
 */
function formatCost( strO ){ return strO.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","); }



//------------ HR Functions --------------



/*
@function() - control logic for when hr task 1 gets updated
@current - this is the form/task that HR filled out and submitted
@db - @db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
 */
function firstTaskProgression(current, db){
	
	if( isReopen() )
		return;
	
	var approval = current.u_approval.toString();
	
	if( approval === "noProcess") {
		
		current.state = TASK_IN_PROGRESS;
		current.u_approver = current.sys_updated_by + " (in progress)";
	}
	
	//executes when approved or rejected
	else {
		current.state = TASK_CLOSED;
		current.u_approver = current.sys_updated_by;
		
		updateOrigRecordSec1(current, db, approval);
	}
}

/*
@function() - updates the original record in the master db after hr task1 update
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@approval - variable passed in that represents if HR approved or rejected
 */
function updateOrigRecordSec1( current, db, approval ){
	
	db.u_section_1_contract_code_string =
	displayContractCode( current.u_contract_code.toString() );
	db.u_section_1_labor_category_string =
	displayLaborCategory( current.u_labor_category.toString() );
	db.u_section_1_immediate_reimbursement_string =
	"$" + formatCost( current.u_immediate_reimbursement );
	
	if( approval === "approve")
		db.u_section_1_approval_action = "Approved";
	else
		db.u_section_1_approval_action = "Rejected";
	
	db.u_section_1_signature_signed_hr = current.sys_updated_by;
	db.u_section_1_signature_date_hr = current.sys_updated_on;
	db.u_hr_notes = current.u_work_notes_comments;
	
	db.state = DB_AWAIT_FIN_1; 
	
	db.update();
}

/*
@function() - control logic for when hr task 2 is updated
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
 */
function secondTaskProgression(current, db){
	
	if( isReopenHR2() )
		return;
	
	var temp = current.description;
	var masterCount = (temp.match(/Course Title/g) || []).length;
	var count = masterCount;
	
	var allApprove = true;
	
	if( count > 0 && current.u_course_1_approval == "noProcess") allApprove = false;
		--count;
	
	if( count > 0 && current.u_course_2_approval == "noProcess") allApprove = false;
		--count;
	
	if( count > 0 && current.u_course_3_approval == "noProcess") allApprove = false;
		
	//first task
	if( allApprove == false){
		current.state = TASK_IN_PROGRESS;
		current.u_approver = current.sys_updated_by + " (in progress)";
	}
	
	//second task
	else{
		current.state = TASK_CLOSED;
		current.u_approver = current.sys_updated_by;
		
		updateOrigRecordSec2( current, db, masterCount );
	}
}

/*
@function - checks to see if hr task has been recently reset
@return - boolean for reset check 
*/
function isReopenHR2(){
	
	var reset = true;
	
	if( current.state != TASK_OPEN )
		reset = false;
	
	else if( current.u_course_1_approval != "noProcess" )
		reset = false;
	
	else if( current.u_course_2_approval != "noProcess" )
		reset = false;
	
	else if( current.u_course_3_approval != "noProcess" )
		reset = false;
	
	else if( current.u_approver != "" )
		reset = false;
	
	else if( current.u_course_1_comments != "" )
		reset = false;
	
	else if( current.u_course_2_comments != "" )
		reset = false;
	
	else if( current.u_course_3_comments != "" )
		reset = false;
	
	return reset;
}

/*
@function() - updates the original record in the master db after task2 update
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@masterCount - masterCount is an integer that was used to count each substring of "Course Title"
in the HR form's description string and serves to count how many courses the user wanted approved
 */
function updateOrigRecordSec2( current, db, masterCount ){
	
	db.u_amount_reimbursed =
	"$" + formatCost( current.u_immediate_reimbursement );
	
	updateOrigRecordSec2Course1Approval(current, db);
	--masterCount;
	
	updateOrigRecordSec2Course2Approval(current, db, masterCount);
	--masterCount;
	
	updateOrigRecordSec2Course3Approval(current, db, masterCount);
	
	db.u_course_1_code = current.u_course_1_comments;
	db.u_course_2_code = current.u_course_2_comments;
	db.u_course_3_code = current.u_course_3_comments;
	
	db.u_hr_signature_2 = current.sys_updated_by;
	db.u_date_received = current.sys_updated_on;
	
	db.state = DB_AWAIT_FIN_2;
	
	db.update();
}

/*
@function() - writes HR's approval/rejection to the original record in the master db
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
 */
function updateOrigRecordSec2Course1Approval(current, db){
	
	if( current.u_course_1_approval.toString() === "approve")
		db.u_course_1_approval = "Approved";
	else
		db.u_course_1_approval = "Rejected";
}

/*
@function() - writes HR's approval/rejection to the original record in the master db
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@masterCount - masterCount is an integer that was used to count each substring of "Course Title"
in the HR form's description string and serves to count how many courses the user wanted approved
 */
function updateOrigRecordSec2Course2Approval(current, db, masterCount){
	
	if( masterCount > 0 && current.u_course_2_approval.toString() === "approve")
		db.u_course_2_approval = "Approved";
	else if( masterCount > 0 && current.u_course_2_approval.toString() === "reject")
		db.u_course_2_approval = "Rejected";
	else
		db.u_course_2_approval = "N/A";
}

/*
@function() - writes HR's approval/rejection to the original record in the master db
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@masterCount - masterCount is an integer that was used to count each substring of "Course Title"
in the HR form's description string and serves to count how many courses the user wanted approved
 */
function updateOrigRecordSec2Course3Approval(current, db, masterCount){
	
	if( masterCount > 0 && current.u_course_3_approval.toString() === "approve")
		db.u_course_3_approval = "Approved";
	else if( masterCount > 0 && current.u_course_3_approval.toString() === "reject")
		db.u_course_3_approval = "Rejected";
	else
		db.u_course_3_approval = "N/A";
}



//----------- Financial Functions --------------



/*
@function - control logic when financial task 1 is updated
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
*/
function fin1Progression(current, db){
	
	var approval = current.u_approval.toString();
	
	if( isReopen() )
		return;
	
	if( approval === "noProcess" ) {
		
		current.state = TASK_IN_PROGRESS;
		current.u_approver = current.sys_updated_by + " (in progress)";
	}
	
	//executes when approved or rejected
	else {
		current.state = TASK_CLOSED;
		current.u_approver = current.sys_updated_by;
		
		updateOrigRecordFin1( current, db);
	}
}

/*
@function - progresses master db state; all other fields are mainly hidden
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
*/
function updateOrigRecordFin1( current, db){
	
	db.state = DB_FIN_APPROVE_1;
	db.u_financial_notes = current.u_work_notes_comments;
	
	if( current.u_approval.toString() === "approve")
		db.u_financial_approval = "Approved";
	else
		db.u_financial_approval = "Rejected";
	
	db.update();
}

/*
@function - control logic when financial task 1 is updated
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
*/
function fin2Progression(current, db){
	
	if( isReopen() )
		return;
	
	var approval = current.u_approval.toString();
	
	if( approval === "noProcess" ) {
		
		current.state = TASK_IN_PROGRESS;
		current.u_approver = current.sys_updated_by + " (in progress)";
	}
	
	else {
		current.state = TASK_CLOSED;
		current.u_approver = current.sys_updated_by;
		
		updateOrigRecordFin2( current, db);
	}
}

/*
@function - progresses master db state; all other fields are mainly hidden from user
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
*/
function updateOrigRecordFin2( current, db){
	
	db.state = DB_FIN_APPROVE_2; 
	db.u_financial_notes = current.u_work_notes_comments;
	
	if( current.u_approval.toString() === "approve")
		db.u_financial_approval = "Approved";
	else
		db.u_financial_approval = "Rejected";
	
	db.update();
}



//--------- MAIN FUNCTION -----------


	
/*
@function() - this is the main function
@current - this is the form/task that HR filled out and submitted
@previous - the state of the form/task before HR updated it
*/
(function executeRule(current, previous /*null when async*/) {
	
	var db = createDatabase();
		
	//this if executes for first section task
	if( current.number.substring(0,3) === "HR1" )
		firstTaskProgression(current, db);
		
	else if( current.number.substring(0,3) === "FN1" )
		fin1Progression(current, db);
		
	//executes for section II
	else if( current.number.substring(0,3) === "HR2" )
		secondTaskProgression(current, db );
	
	else if( current.number.substring(0,3) === "FN2")
		fin2Progression(current, db);
			
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>jackretcher</sys_created_by>
        <sys_created_on>2018-06-27 18:44:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>294ba3c4db071300f8275385ca9619c4</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>APP_onUpdate</sys_name>
        <sys_overrides/>
        <sys_package display_value="Training Reimbursement Workflow" source="x_237286_training">b2ce9fc2db321300f8275385ca961998</sys_package>
        <sys_policy/>
        <sys_scope display_value="Training Reimbursement Workflow">b2ce9fc2db321300f8275385ca961998</sys_scope>
        <sys_update_name>sys_script_294ba3c4db071300f8275385ca9619c4</sys_update_name>
        <sys_updated_by>jackretcher</sys_updated_by>
        <sys_updated_on>2018-07-12 15:14:49</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=294ba3c4db071300f8275385ca9619c4"/>
</record_update>

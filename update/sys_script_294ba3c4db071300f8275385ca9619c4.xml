<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_237286_training_records_needing_approval</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>APP_onUpdate</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/*
@function() - the choice object that allows HR to select the correct contract
code operates with both a display value and backend value; when attempting to return the
variable that HR selected (the display value), the object would return the backend value
instead even when the toString() and getDisplayValue() functions were used; in order to
get the display value, this switch case takes that backend value and pairs it with its
display value; if a function is found that returns the display value instead, be sure
to use it and get rid of this switchcase
@str - toString() variable returned by the choice object; corresponds with a distinct display
variable that HR selected orginially
@return - the display value that HR originally selected
 */
function displayContractCode( str ){
	switch(str){
		case "-1": return "--None--";
		case "0": return "Berico Technologies: EAADS";
		case "1": return "BAH EMT: TO4";
		case "2": return "BAH EMT: TO6";
		case "3": return "BAH EMT: TO7";
		case "4": return "BAH EPS";
		case "5": return "Acuity";
		case "6": return "ACS CDO TO9";
		case "7": return "CSRA DOS CSOS";
		case "8": return "ManTech International";
		case "9": return "Non-Billable G&A";
		case "10": return "Non-Billable OH";
	}
}

/*
@function() - the choice object that allows HR to select the correct labor category
operates with both a display value and backend value; when attempting to return the
variable that HR selected (the display value), the object would return the backend value
instead even when the toString() and getDisplayValue() functions were used; in order to
get the display value, this switch case takes that backend value and pairs it with its
display value; if a function is found that returns the display value instead, be sure
to use it and get rid of this switchcase
@str - toString() variable returned by the choice object; corresponds with a distinct display
variable that HR selected orginially
@return - the display value that HR originally selected
 */
function displayLaborCategory( str ){
	switch(str){
		case "-1": return "--None--";
		case "0": return "EAADS:Direct Labor:SM/FE Level 4 (Gr 3) Hourly";
		case "1": return "EAADS:Direct Labor:SM/FE Level 4 (Gr 3) Surge CLIN - Hourly";
		case "2": return "EAADS:Direct Labor:Software Engineer Level 1 (Gr 3) Surge CLIN - Hourly";
		case "3": return "EAADS:Direct Labor:Software Engineer Level 3 (Gr 3) - Hourly";
		case "4": return "EAADS:Direct Labor:Software Engineer Level 3 (Gr 3) Surge CLIN - Hourly";
		case "5": return "EAADS:Direct Labor:Software Engineer Level 2 (Gr3) Hourly";
		case "6": return "EAADS:Direct Labor:Software Engineer Level 2 (Gr3) Surge CLIN - Hourly";
		case "7": return "EAADS:Direct Labor:Software Engnr Level 4 (Gr7) Hourly";
		case "8": return "EAADS:Direct Labor:Software Engnr Level 4 (Gr7) OY1 Surge CLIN - Hourly";
		case "9": return "EMT TO4: Direct Labor: Sr Solution Architect - Hourly";
		case "10": return "EMT TO4: Direct Labor: Sr Data Engineer - Hourly";
		case "11": return "EMT TO6: Direct Labor: SM/FE Level 2 - Hourly";
		case "12": return "EMT TO7: Direct Labor: Systems Architect Level 3 - Hourly";
		case "13": return "EMT TO7: Direct Labor: Systems Architect Level 2 - Hourly";
		case "14": return "EPS2: SME Level 4 - Hourly";
		case "15": return "OCA: DECCS: CLIN 301 IT Subj Matter Spec. OY 3 - Hourly";
		case "16": return "OCA: DECCS: CLIN 302 Systems Analysis/Director OY3 - Hourly";
		case "17": return "OCA: DRL: CLIN 301 IT Subj Matter Spec. OY 3 - Hourly";
		case "18": return "OCA: DRL: CLIN 302 Systems Analysis/Director OY3 - Hourly";
		case "19": return "OCA: INL: CLIN 301 IT Subj Matter Spec. OY 3 - Hourly";
		case "20": return "ESITA TO9 Consultant - Sr IT Strategy - Hourly";
		case "21": return "CSOS: OY1Ph2 Principal Engineer/Analyst - Hourly";
		case "22": return "CSOS: OY1Ph2 Principal IT Analyst - Hourly";
		case "23": return "CSOS: OY1Ph2 Senior Engineer/Analyst - Hourly";
		case "24": return "CSOS: OY1Ph2 Sr SME - Hourly";
		case "25": return "Brooklyn: Info Technology Specialist Sr - Hourly";
		case "26": return "Brooklyn: Principal SME - Hourly";
		case "27": return "Brooklyn: Sr Principal SME - Hourly";
		case "28": return "G&A: Conf & Seminar Time - Hourly";
		case "29": return "G&A: Training / Cert Time - Hourly";
		case "30": return "OH - Hourly";
		case "31": return "OH: Conf & Seminar Time - Hourly";
	}
}

/*
@function() - creates a glide record that first points to the master db
table and then queries the original record that triggered the workflow
@return - gliderecord is returned; this will be used to update the fields
in the original record as HR updates their task form; see updateOrigRecordSec1()
for more info
 	*/
function createDatabase(){
	
	//get table
	var db = new GlideRecord('x_237286_training_training_reimbursement_records');
	
	//filter for records
	db.addQuery('number', current.u_original_record_number);
	
	//get records
	db.query();
	
	//prime record
	db.next();
	
	return db;
}

/*
@function() - responsible for changing the state of HR's form based
on their approval response; if approved or rejected, this function calls
updateOrigRecordSec1() to update the original record in the master db
@current - this is the form/task that HR filled out and submitted
@db - @db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
 */
function firstTaskProgression(current, db){
	
	var approval = current.u_approval.toString();
	
	if( approval === "noProcess") {
		
		current.u_hr_state = "Work in Progress";
		current.u_approver = current.sys_updated_by + " (in progress)";
	}
	
	//executes when approved or rejected
	else {
		current.u_hr_state = "Closed";
		current.u_approver = current.sys_updated_by;
		
		updateOrigRecordSec1(current, db, approval);
	}
}

/*
@function() - after HR updates their first task form, this function takes relevant
information and updates the original record in the master db with them
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@approval - variable passed in that represents if HR approved or rejected
 */
function updateOrigRecordSec1( current, db, approval ){
	
	db.u_section_1_contract_code_string =
	displayContractCode( current.u_contract_code.toString() );
	db.u_section_1_labor_category_string =
	displayLaborCategory( current.u_labor_category.toString() );
	db.u_section_1_immediate_reimbursement_string =
	"$" + formatCost( current.u_immediate_reimbursement );
	
	if( approval === "approve")
		db.u_section_1_approval_action = "Approved";
	else
		db.u_section_1_approval_action = "Rejected";
	
	db.u_section_1_signature_signed_hr = current.sys_updated_by;
	db.u_section_1_signature_date_hr = current.sys_updated_on;
	
	db.u_state_current_form = "HR Approval I";
	
	db.update();
}

/*
@function() - after HR updates their second task form, this function may be
called; unlike updateOrigRecordSec2Course2Approval() and updateOrigRecordSec2Course3Approval(),
this function does not rely on a masterCount variable; this is because it is assumed that if a
user wants secondary reimbursement, then there is at least one thing they want reimbursed; due to
this, this is where HR would designate their approval/rejection; SPECIFICALLY, this function writes
HR's approval/rejection to the original record in the master db
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
 */
function updateOrigRecordSec2Course1Approval(current, db){
	
	if( current.u_course_1_approval.toString() === "approve")
		db.u_course_1_approval = "Approved";
	else
		db.u_course_1_approval = "Rejected";
}

/*
@function() - after HR updates their second task form, this function may be
called; using masterCount, this function looks to see if HR had to approve or
reject a second course besides the first mandatory one and updates the original record
in the master db accordingly; if course 2 was hidden from HR view (meaning the user only
wanted approval for one course), this function will send N/A back to the originial record
to document this (this is because the default value for u_course_2_approval is noProcess)
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@masterCount - masterCount is an integer that was used to count each substring of "Course Title"
in the HR form's description string and serves to count how many courses the user wanted approved
see ____ the working implementation of this and how it works
 */
function updateOrigRecordSec2Course2Approval(current, db, masterCount){
	
	if( masterCount > 0 && current.u_course_2_approval.toString() === "approve")
		db.u_course_2_approval = "Approved";
	else if( masterCount > 0 && current.u_course_2_approval.toString() === "reject")
		db.u_course_2_approval = "Rejected";
	else
		db.u_course_2_approval = "N/A";
}

/*
@function() - similar to updateOrigRecordSec2Course2Approval(); after HR updates their second task form,
this function may be called; using masterCount, this function looks to see if HR had to approve or
reject a third course besides the first mandatory one and updates the original record
in the master db accordingly; if course 3 was hidden from HR view (meaning the user only
wanted approval for either one course or two courses), this function will send N/A back to
the originial record to document this (this is because the default value for u_course_3_approval
is noProcess)
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@masterCount - masterCount is an integer that was used to count each substring of "Course Title"
in the HR form's description string and serves to count how many courses the user wanted approved
see ____ the working implementation of this and how it works
 */
function updateOrigRecordSec2Course3Approval(current, db, masterCount){
	
	if( masterCount > 0 && current.u_course_3_approval.toString() === "approve")
		db.u_course_3_approval = "Approved";
	else if( masterCount > 0 && current.u_course_3_approval.toString() === "reject")
		db.u_course_3_approval = "Rejected";
	else
		db.u_course_3_approval = "N/A";
}

/*
@function() - after HR updates their second task form, this function takes relevant
information and updates the original record in the master db with them
@current - this is the form/task that HR filled out and submitted
@db - this is the master db containing the original record to be updated;
see createDatabase() for master db creation
@masterCount - masterCount is an integer that was used to count each substring of "Course Title"
in the HR form's description string and serves to count how many courses the user wanted approved
see ____ the working implementation of this and how it works
*/
function updateOrigRecordSec2( current, db, masterCount ){
	db.u_amount_reimbursed =
	"$" + formatCost( current.u_immediate_reimbursement );
	
	updateOrigRecordSec2Course1Approval(current, db);
	
	--masterCount;
	
	updateOrigRecordSec2Course2Approval(current, db, masterCount);
	
	--masterCount;
	
	updateOrigRecordSec2Course3Approval(current, db, masterCount);
	
	db.u_course_1_code = current.u_course_1_comments;
	db.u_course_2_code = current.u_course_2_comments;
	db.u_course_3_code = current.u_course_3_comments;
	
	db.u_hr_signature_2 = current.sys_updated_by;
	db.u_date_received = current.sys_updated_on;
	
	db.u_state_current_form = "HR Approval II";
	
	db.update();
}



/*
@function() - takes in string object from multiple price fields and returns a string
formatted with commas in a periodicity of 3; for example, if a price field returns
	123456.78, this function turns it into 123,456.78; NOTE: this function does not place
a '$' in front
@strO - string object of price field
@return - formatted string of numbers using commas with periodicity of 3
 */
function formatCost( strO ){ return strO.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","); }
	
	
	(function executeRule(current, previous /*null when async*/) {
		
		var db = createDatabase();
		
		//this if executes for first section task
		if( current.number.substring(0,4) == "APP1" )
			firstTaskProgression(current, db);
		
		
		//executes for section II
		else{
			
			var temp = current.description;
			var masterCount = (temp.match(/Course Title/g) || []).length;
			var count = masterCount;
			
			var allApprove = true;
			
			if( count > 0 && current.u_course_1_approval == "noProcess") allApprove = false;
				--count;
			
			if( count > 0 && current.u_course_2_approval == "noProcess") allApprove = false;
				--count;
			
			if( count > 0 && current.u_course_3_approval == "noProcess") allApprove = false;
				
			//first task
			if( allApprove == false){
				current.u_hr_state = "Work in Progress";
				current.u_approver = current.sys_updated_by + " (in progress)";
			}
			
			//second task
			else{
				current.u_hr_state = "Closed";
				current.u_approver = current.sys_updated_by;
				
				updateOrigRecordSec2( current, db, masterCount );
				
			}
			
		}
	})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>jackretcher</sys_created_by>
        <sys_created_on>2018-06-27 18:44:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>294ba3c4db071300f8275385ca9619c4</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>APP_onUpdate</sys_name>
        <sys_overrides/>
        <sys_package display_value="Training Reimbursement Workflow" source="x_237286_training">b2ce9fc2db321300f8275385ca961998</sys_package>
        <sys_policy/>
        <sys_scope display_value="Training Reimbursement Workflow">b2ce9fc2db321300f8275385ca961998</sys_scope>
        <sys_update_name>sys_script_294ba3c4db071300f8275385ca9619c4</sys_update_name>
        <sys_updated_by>jackretcher</sys_updated_by>
        <sys_updated_on>2018-06-28 19:13:06</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=294ba3c4db071300f8275385ca9619c4"/>
</record_update>
